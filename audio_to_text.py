# -*- coding: utf-8 -*-
"""Audio_to_Text.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ISCYj65yGFoV5PoA-R8oLoKSCBRFtxQ-
"""

!pip install -U yt-dlp

!apt-get install -y ffmpeg

import yt_dlp

def download(url):
    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': '%(title)s.%(ext)s',  # Save as title.mp3
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '64',
        }],
    }

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        ydl.download([url])

video_url = "https://youtu.be/6ChzCaljcaI?si=1cLrMpAVvulipn7f"
download(video_url)

import os

def split_video(input_file="video.mp3", chunk_length=15*60):  # 40 minutes
    os.makedirs("chunks", exist_ok=True)

    # Print audio duration
    print("Checking duration...")
    os.system(f'ffmpeg -i "{input_file}" 2>&1 | grep "Duration"')

    # Split the file
    print("Splitting audio...")
    os.system(f'ffmpeg -i "{input_file}" -f segment -segment_time {chunk_length} -c copy chunks/output%03d.mp3')

split_video("video.mp3")

!pip install groq

import os
from groq import Groq
from glob import glob

client = Groq(api_key="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")

chunk_folder = "chunks"
chunk_files = sorted(glob(os.path.join(chunk_folder, "*.mp3")))

full_script = ""
for idx, filepath in enumerate(chunk_files):
    filename = os.path.basename(filepath)
    print(f"Transcribing chunk {idx+1}/{len(chunk_files)} : {filename}")
    with open(filepath, "rb") as file:
      transcription = client.audio.transcriptions.create(
        file=(filename, file.read()),
        model="whisper-large-v3-turbo",
        response_format="verbose_json",
      )
      full_script += transcription.text + "\n"

print(chunk_files)

print(full_script)

full_script = """In this course from Cole Blender, you'll build a full stack note taking app using Next.js 15, Supabase, Prisma ORM and ShadCN for modern styling. You'll learn to integrate the OpenAI API to add ChatGPT functionality, making your notes interactive. Finally, you'll deploy the app to the web with Vercel, creating a polished, fully functional project. We're about to make a notes app where you can take all of your notes and then you can use chat GPT to basically ask questions about all of your notes. We're going to be using Next.js 15. We're going to be using the OpenAI API. We're going to be using Supabase and Supabase Auth as well as Prisma. We're going to do all the styling using ShadCN. And then when we're done, we're going to deploy it with Vercel. So by the end of this video, you're going to have a fully functioning app that is actually on the internet. It actually uses AI in the app. so let's take a quick look at what this app is going to look like so let's bring this into the screen so as you can see i'm logged in it's called goat notes it's legit so right here we got an empty note and i can just say subscribe to cole blender let me spell that correctly and then we can create a new note we got ourselves a new note this automatically saved while we were typing we're going to i'm going to show you how to do all of that and then right here i can ask ai i can say what are my notes about and then it's thinking it's thinking and it's going to say your note summary it knows when i created it last updated and then it just says subscribe to cold blender so let me put in some more extensive notes and then we'll ask it some questions about that all right so right here i'm going to paste in some notes that i have made on docker and so now that's already saved so now i can ask the ai and i can say what are my notes about and it's gonna know it's gonna read all of my notes so it knows i'm talking about docker and then it also knows i have this other note so i could say something like i have a test coming up on docker using my notes give me a 10 question quiz and so we wait for this it's thinking it's doing its thing and then boom we have our output right here and it just came up with a quiz for us so you can you can write notes on anything you want and this is going to basically give you the power of chat gpt and it's going to know all about your notes oh yeah and also this goes without saying we're obviously going to have light mode dark mode we're going to be using shad cn it's going to be legit So enough talk. Let's do it. All right. So let's get this project started. So I use PMPM. So I'm going to say PMPM DLX create next app at latest. And we'll call this goat notes. If you're using NPM, then it's just going to be NPX as opposed to PMPM DLX. So we're going to use TypeScript. We're going to use ESLint, Tailwind. Yes to source directory. Yes, app router. Yes, TurboPack. no to that. So once this thing is done, we're going to CD into goat notes and we're going to open this up in VS code. So if I open this terminal and I say PNPM dev, or if you're using NPM, you'll do NPM run dev. So we got this thing running. Let's open this up and you can see we just have our starter template for the next JS project. So let me get this situated. Okay. So So the first thing we going to do is just get this into a better starting position So we going to come over to the layout We going to remove all of this we going to remove these fonts we going to remove this and then right here i going to call this goat notes get rid of this description also the github repo is in the description so all of the finished code is there all the resources i have a couple of pictures a couple of things so if you want any of that it's in the description give it a star i would very much appreciate that so then we're also going to come over to the page file we're going to remove all that we're going to say rfce we're going to say home page and so now you can see we've got this home page right here also what i'm going to do in the source directory i'm going to create a new file called or a folder called styles and i'm going to move this global css file in there and then we have to come back to this app layout and we're going to say at slash styles slash globals.css we can also come in here to the public file remove all of this we're going to delete this and then i'm going to add this png file to public this is our logo this is godius this is the mascot and then also instead of using this for the favicon we're going to delete this and i also have this picture but as a favicon in the GitHub repo so you can go and grab that as well. So now you can see we got Godius up here. This is starting to look legit already. Also, I'm going to add auto sorting for Tailwind, which is very handy. So I'm going to say pnpm add dash d prettier and then prettier dash plugin dash Tailwind CSS. So we're going to run that and that just added the packages for us. also going to have to create a new file dot prettier rc and we're just going to go like this we're going to say plugins and it's going to be an array and it's going to be prettier dash plugin dash tailwind css and so now if we come here and we say like class name we'll just say like bg red 400 text blue 300 we'll just say height of 20. we save that and it's going to auto sort it for us so it's it's very consistent everywhere throughout the app i would highly recommend using this also one more little thing we're going to do we're going to come over to this es lint file and we're going to add one rule so we're gonna let me just use that autocomplete so basically so this is not correct this needs to be it's going to be no unescaped entities and we're going to set that to off so basically if you don't have this and you have something like this where you use an apostrophe and then you go to try to deploy it to versell this is going to the the linter is going to say this is not allowed so that's why we have this rule that basically says you're allowed to use commas or you're allowed to use apostrophes and other things like that all right so now what we're going to do we're going to add a little bit of shad cn so we're going to go to this link i'll have it in the description and we're just going to simply copy this command paste it in and then we're going to use new york we're going to use slate and yes we would like css variables and then also what we're going to do we're going to add dark mode so just right here we're going to click dark mode next js we're going to copy this paste this we're going to copy this code right here and what i like to do because we're going to have a couple providers so i going to create a folder called providers and then in here i going to call it theme provider with that casing and then we just going to paste that in and it very simple so we going to copy this we going to come into the app file and then in the body we're going to paste this and then we just have to import our theme provider and so now we have our theme provider and what's going to happen is it's going to give us this error over and over and over so what i'm going to do is i'm going to come up to this html tag and i'm going to say suppress hydration warning and so now this error message is no longer going to show up and this error is totally fine that is how this thing works so you're totally fine with that so we're going to come back into shad cn and we're going to add some toast because we're going to use this throughout our app a lot so we're going to scroll down here we're going to come to toast and we're going to copy this command paste that in and then and then we're going to go to the app layout and inside of the theme provider we're going to add the toaster and we're going to import that from our components folder which it just got added with that command and so now we can use this toast throughout the whole app all right so now let's add a little bit of ui to this app so the first thing we're going to add is a header so we're going to come to the components folder we're going to create a new file we're going to call it header.tsx rfce if that is not working for you then you need to come to the extensions tab and get type in react and get which one of these i don't know maybe both of these i would get both of those so in this header we're going to replace this div with the header i'm also going to remove this because we don't need it and inside of this header we're going to have a link import this from next link we're going to give this an href of just slash so it goes to the home route and inside of this link we're going to have an image import that from next image and we're going to give this a source equals and it's going to be slash godius dot png if you want that file it's in the github repo and then we also need to give it a height of 60 a width of 60 we're going to say alt is logo and then we're going to give it a class name of rounded full and then outside of that class and we're going to say priority also what i'm going to do so we can see these changes is we're going to go into the layout and we're going to import the header and so now you can see that logo also what i'm going to do is wrap this in a div and we're going to give this a class name of flex we're going to say min height screen we're going to say width full we're going to say flex call and then we're going to wrap this children in a main tag and we're going to say flex flex one we're going to say flex call px of four p top of ten and then we're going to say when it gets to xl we're going to say a px of eight and so now we've got our header which is above the main content so let's go back to our header and let's add a little styling to the header so this is going to be relative flex height of 24 a width of full item center justify between a background of pop over which is a color that was automatically created when we created shad cn if we come over to our globals when we initialized shad cn it added all this stuff for us and so this is how you work with dark mode is we call it popover and so we can see when it's in light mode this is the color of popover in dark mode this is the color of popover so we're going to add that toggle switch here in just a second and you'll be able to see how easy it is to work with this so also we're going to say a px of three and then we're going to say small a px of eight and i'm also going to add this little glowing thing so i'm going to say style equals i'm going to say box shadow and we're going to say shadow and so we're going to import this so in styles i'm going to create a file called utils.ts so we're going to come into this file and i'm just going to paste this if you want this exact stuff it's in the GitHub repo. So we're going to save that file. We actually don't need to export this. And then we're going to come back to this header and we're going to import this shadow. So now, all right, we're getting a little separation. The header's starting to come alive. We're looking good. We're looking good. So also in this link, I'm going to create an H1 tag and we're going to say goat. And then we're going to say a span tag. And in here, we're going to say notes. So I'm going to come to this link. We're going to make this flex. We're going to say items end, and we're to give it a gap of two okay so we're going to come to this h1 we're going to say flex flex call a padding bottom of one text 2xl font semi bold and then we're going to say a leading of six which is basically the line height all right so now we got this header link so if we click on that we go to the home route now we're going to put a couple of buttons over here like logging in dark mode stuff like that so we're going to come here below the link and we're going to create a div we're going to give this a styling we're going to say flex and gap four and then we're going to dynamically render some stuff so for now we're just going to say const user equals null we're going to set this up later so this actually gets the user using super base off and then in here we're going to say user question mark so if there's a user it's gonna this is going to be a logout button but for now we'll just show that string if there's not a user what we're going to have is a couple of buttons so we need to add the button from shad cn so i'm gonna say pmpm dlx shad cn at latest add button and you can get this command from shad cn so you just come back to the shad cn i would keep this open we're going to be using this a lot go to the button and then you can just copy that command all right so in here we're going to have a button we need to import this we just added that with the command and in this button we're going to have a link that is to log in and right here in this button we're going to say as child so basically this add child what it's going to do is it's going to make it so it just applies all of the styles to this without actually putting this html tag so we don't want a button tag and then an anchor tag so when we do this it's just going to make it look like a button but it's actually just a link so we're going to also we're just going to copy and paste that and then we're going to create a sign up one and for this login we're going to say a variant and we're going to make this outline also what i'm going to do for for this sign up is I'm going to make it be hidden by default. And then when the screen reaches the size
 small it's going to turn into block so when the screen is super small like on an iphone or something it's going to be gone but then when it gets large it'll pop up and so on the login page on the login form there will be a button to go to the sign up if you want you could add a turn this into a hamburger menu something basically like this but i'm just keeping it very simple all right now we're going to add the dark mode button so let's come back to shad cn go to dark mode and scroll down and here is the dark mode button so we're going to click the code we're going to copy that and then in our components we're going to create a new file and we're going to call this dark mode toggle.tsx and we're just going to simply paste all that in as you can see we need this drop down menu so i'm going to say pmpm dlx shad cn at latest add drop down menu and so that's going to add all of the drop down menu code for us and so now we can see that that is imported so we can save this file come over to the header and regardless of if the user is logged in or logged out we're going to display the dark mode toggle we're going to and then we're going to import this for some reason it's not doing the auto thing for me so i gotta say import yeah okay i know why so this is exporting it like that i'm going to go like this instead of calling this mode toggle i'm going to call it dark mode toggle and then i'm going to say export default dark mode toggle so now this works all right so now we go to our website we've got the button right here this is already looking legit so the reason it turned to dark mode is because it defaults to system which i of course am using dark mode if you're not what are you doing so now we can easily switch back and forth i'm going to be doing this all in dark mode and we can also see so if the user is null it's going to show this if the user is let's just say one or true it's going to show this which is not what we want so we're going to create a specific component for this and we're going to call this logout button so we need to create this component logout button.tsx rfce and then we can come and import this so now we can come into this logout button and all it's going to be is a button from shad cn so we want to import that and what this is going to do we're going to make this show some dynamic content so we're going to say loading so if it's loading we're going to show the loader to icon which when you add shad cn it automatically adds the lucid icons library for you which i use for everything so we're going to add loader two and then in here we're going to say animate spin so if it's loading it's going to show that if it's not loading it's going to say log out and so right here we'll just for now well yeah we're going to use state so we'll just do that and we're going to say loading is going to equal false and then in order to make this work with use state and other react component hooks we're going to come up here and say use client and so now you can see it going to say log out but if loading is true it going to do that but we don want that little shift to happen so we going to add a class name right here and we just going to simply say width of 24 so it's always going to be fixed also i'm going to add a few more props to this button we're going to say variant is going to be outline on click is going to be handle log out so we're going to create this function we'll finish this in a second but let's just add it real quick handle log out we'll just say log logging out and then we're also going to say disabled this button's going to be disabled when loading is set to true so if we set this to true you can see it's going to like make this thing fade out a little bit and that is because of the shad cn button so let's set this back to false and so we're going to set up super base auth in a little bit when we do that we'll be able to write the rest of this function for now what we can just do is say set loading to true at the very bottom it's going to say set loading to false and then right here we can just say await new let's actually make this an async function and then we're going to say await new promise and we'll let it load for two seconds this is just basically simulating the actual logout We're going to write a function for that later. And that function is ultimately going to return an error message. And for now, we'll just set this to null. And then we'll say, if there's not an error message, we're going to show some toast. So we need to come up here and we're going to say const toast equals used toast, which when we set up our toaster at the very beginning, it came with this hook for us. and then so we can come right here and say toast i'm going to say a title of logged out a description you've been successfully logged out and then we're going to give it a variant of success which doesn't exist so we're going to come into this ui we're going to come into toast let's see yes we're going to come into ui toast.tsx and we see we have a variant of default and destructive we're going to add one called success and all i'm going to do is just say a bg of emerald 700 and so now when we come back to this this knows that this can be success now and then also we're going to push it to the home page so we're going to get the router we're going to say const router equals use router you have to make sure that you import this from next slash navigation not next router next navigation and then we're going to come down to right after this toast and we'll just say router.push to the home page so that's if there's not an error message if there is an error message then we'll just show an error toast and so now we can simulate this so if we click log out boom log out you've successfully been logged out let's see what it's going to look like if there's an error so we try to log out and then boom error and say just like air logging out and so this whatever the error message is is going to be displayed in the toast so we can just leave this like this for now we'll come back to this once we set up the super base auth we're going to finish this and it's actually going to be able to log you out All right, so now let's add the login and sign up pages. And then once we do that, we're going to create a super base project and we're going to set up super base off. So let come over here to app and we going to create a new file We going to call this login slash page and then we going to say rfce and we going to call this the login page and so now if we come over to slash login boom we're at the login page this is how you make routes in xjs with the app router it's very simple so we're going to come in this div we're going to give it a class name we're going to say a margin top of 20 flex flex one flex call and items center and then what we're going to do we're going to use the shad cn card component so we're going to say pmpm dlx shad cn at latest add card and so what we're going to do is we're going to import this card and we're going to give this a class name of width full and a max width of medium and then inside of here we're going to get the card header and we're going to give this a class name of margin bottom four if you want to know if you want to know if you want to know all the different card components you just simply come over here to card and they're all right here and you can change these any way you want you can also look at the docs and read all about that so in this card header we're going to have a card title import that and it's just going to say login and then we're also going to add a class name this we're going to say text center and we're going to say text 3xl and so the login page and sign up page are going to be almost identical so what i'm going to do is create a component called auth form and this is going to be of type equals login so let's create this component it's going to be called auth form.tsx rfce so we're going to save this come back to the login page and import this and then now everything we change in the off form we're going to see so first thing we're going to do is we're going to this is going to expect type so we're going to say type props equals and then in here type and it's going to either be log in or sign up and so now so you what you could do is make this a string but then it could just be any string so now this is going to give us auto completion so if we come here and for the for the type if we hit control space or maybe it's something else on windows it's going to show us it can only be one of these two things so when you're typing stuff and you know it can only be certain strings you should always do this because it will give you the auto complete we're also going to make this a client component so we're going to say use client and we're going to come here we're going to say const is login form i'm going to say type equals login this is just going to be much easier to type than typing this in everywhere we're also going to need the router from use router next navigation not next router we're also going to need some toast equals use toast and then we're going to have a function called const handle submit and we will write that in a second and this handle submit is going to expect form data which is of type form data so So for now, we'll just say log form submitted. All right, so now let's add a little styling. Instead of this being a div, we're gonna make this a form and we gonna say on submit We gonna say handle submit Actually instead of on submit we going to make this an action we going to use server actions which are very easy to use and very convenient for the next js app router yeah we're going to be we're going to write a couple of api endpoints throughout this app and then we're also going to use server action so we're going to use both of them i prefer to use server actions anytime i can sometimes you have to use an api route though all right so in this form we're going to say hard content we're going to import that and then we're going to have a div and in this div we're going to have a label which we do not have yet so we're going to say pmpm dlx shed cn at latest and we're going to add the input and we're going to add the label and so we're going to say label we can now import this make sure you import it from dot slash ui slash label and then that is exactly what we want and then right here we're going to put an input and this is going to have an id of email a name of email a placeholder of enter your email type email we're going to make this required and then we're going to say disabled is going to equal something that's called is pending and so with server actions we're going to use something called use transition which is a hook that gives us a couple of things and one of those is the is pending it's just a boolean true or true or false so while the server action is occurring this is pending is going to be set to true so it's basically just it's going to show our loading state depending on this is pending so we can actually come up here and we can say use transition we're going to import that and that's going to give us two things is pending and start transition which is a function so we save that now we can see our forms got a little bit we're We're getting there. We're getting there. So we're going to come to this div right here. We're going to give this a class name. We're going to say flex, flex call. And we're going to say space of Y 1.5. And we're going to save that. And then we're going to copy this. And we're going to paste this down. And so you can see, okay, we got this twice. We're going to change this to the password. But first, we're going to come to this card content. We're going to add a class name. We're going to say grid. I'm going to say a width of full items center and a gap of four. And so now everything here that says email, we're going to change to password. And you can see when I did that, this new to be uppercase because I'm using this extension called like something case, multiple cursor case preserve. I use this all the time. Very handy. so now we can save that and our form is starting to look a little better now we're going to add the button so we're going to come right here we're going to say card footer and in this card footer we're going to have a button we're going to import that and we're going to display if it's pending so the loading state we're going to have the loader 2 and we're going to say class name animate spin if it's not pending, then we're going to say, if it's the login form, show the word login, otherwise show sign up. So when we save this, it's going to kind of bracket this off a little bit for us. So basically it's going to say, if it's pending, then show this. If it's not
 pending then show this entire thing which is its own ternary statement which isn't necessarily the cleanest or the prettiest but this is fine if you had to do more than this i would not do that so i'm going to come to this button we're going to say class width full and then the card footer we're going to say margin top of four flex flex call and then we're going to say a gap of six and then beneath this button we're going to have a and this is going to have a class of text extra small and then in this we're going to say is login form and if it is the login form then we're going to say don't have an account yet if it is the sign up form then we're going to say already have an account question mark and we can actually keep that little space in there and then in the same p tag we're going to have a link make sure you import this from next link and not lucid react and then we can do that auto complete and we got to get the closing the closing tag and in here we're going to say is login form it's going to say sign up otherwise it's going to say login and then for this link we can also give it a class name and we're going to make this a dynamic class name we're going to say text blue 500 and we're going to give it an underline and then we're going to say if is pending is true pointer events none and then we're also going to give it an opacity of 50. so when is pending is true you won't be able to click this right now this is going to work except we haven't created that page all right so we're going to write this handle submit in a second we're going to set up our supabase auth but first let's just come over to app and let's create a new file we'll call it sign dash up slash page dot txx and we're just going to come to the login page we're going to copy this we're going to paste it in here and everywhere that says login is going to be sign up and so now we can save this and so now if we click the sign up, it goes to the sign up page. All right. So now we're going to come over to Supabase and we're going to create a new project. And I'm going to call this goat notes, period. We're going to generate a password. We're going to copy this. We're going to come back to our project. We're going to create a new file called dot env dot local. And then we're going just call this db password equals just save that we're going to need this in a second so i'm going to create this new project we're going to wait for that to get created all right so we can see this is setting up project so we're just going to wait a couple of seconds wait for this to get fully ready it's going to take you to a different page and then i'll show you what to do all right so we're going to use supabase for auth as well as our database so eventually we are going to need this connection string so we're just going to get it right now so click connect and then scroll down to this bottom one you're going to copy that and then we're going to come into our dot env dot local file and we're going to call this database url and we're going to paste that in and then this thing right here that says your password we're going to copy this and we're going to paste this in and so now we can actually get rid of this thing so we've got this and then we're We're also going to come over to project settings. We're going to go to database. We're going to go to project settings. We're going to go to API book. And then we going to get this URL We going to copy this We going to come over here and we going to call this super base url we going to paste that in we going to get this right here we going to copy this super base a non key paste that in also we going to need next public base url and we're going to set this equal to this local host we don't need this right now but we're going to need this eventually so just type this in real quick so if we click on authentication there's a couple of things you're going to want to configure so allow new users to sign up we'll set this to true for now we may eventually want to turn that off if for whatever reason we got the password length another thing that you're eventually if you want to actually use this as a production website you're going to want to enable custom smtp because as you can see the service has rate limits and is not meant to be used for production apps so just for this simple thing we're just going to use the supabase email system that they have but if you want this to actually scale and be used by users you're going to need to use something like i use sendgrid i have a video on how to set that up i'll put it in the description so now what we're going to do we're going to head over to these docs which are in the description and this is how to set up the auth so right here i'm not going to copy that because i'm using pmpm but we're going to want to add these packages so i'm going to say pnpm add paste that in and then it says to set up the environment variables we already did that don't let anyone see these it says to use next public we're not going to use next public we because when you do this this exposes the keys to the client since we're not going to be using any super base on the client there's no point doing this all it does is make it a little bit less secure so do not include next public we already did it correctly so we're going to come over here to step three we're going to go to this server and we're going to copy this so make this a little bit smaller and then we're going to come into our source directory and we're going to create a new file and we're going to call this auth server dot ts and we're going to paste this code in we can remove this comment and then we're going to add another function in here in a second but first what we're going to do we're going to scroll down a little bit we're going to hook up middleware we're going to use middleware because it's it's basically going to look at if the user is logged in and they try to go to the login route the middleware is going to see that so basically what middleware is is on every single call to the server it first goes through the middleware so it's basically like a layer of protection or security or if you want something to happen like if you wanted to like log some information to like some other service you could handle that in the middleware so we're going to copy this and in the source directory we're going to create a new file called middleware.ts you have to make sure this is spelled correctly if it's not spelled correctly it's not going to work and then they say to make a different folder i'm not going to do that so we're going to copy that we're going to paste this and we can remove all of these comments so let's get rid of all this get rid of this and then we're going to move these imports up here we don't need this and then we can also remove this and then this thing that says options we don't use that so we can also remove that and so now you can see when when we save this, it says compiled middleware. So this function right here update session So this is the main thing is export async function middleware next knows that when you have a file called middleware and you export the middleware function that a special function and it knows to run whatever you put in that so we have this update session and then this right here is also something that next.js knows about this is basically saying what routes to apply the middleware to so we're just going to leave this as the default but you could make it so like don't run middleware on the homepage or only run middleware on routes that start with slash auth. And so what we need to do is change this. This says next public. We're not using next public. So just delete that. And then also we're going to get rid of this right here. And then for now, we can just comment this out. We will. Let me also comment this out. So we will be doing this. We will be messing with this a little bit later. And let me just show you so I can console log middleware ran so this is going to log every time this middleware runs it's going to log that so if we come to this and we go to the login route yep middleware ran let's go to that route yep middleware ran yep so we have it set up so every single route change this function is going to run so we're going to set that up later so now what we're going to do we're going to come back to this auth slash server file and we're going to change this just a little bit we're going to say const client equals and then we're going to say return client and the only reason i'm doing that is to show you what this super base thing is going to be returning so actually first let's get rid of this next public i have forgot to remove that before and it's a very very difficult bug to catch so client period you can see we have the off we have all of these things what we're going to be using is off and so what else does off have it's got all of these things and what we're going to want to use is get user that's how we're going to get the user but we just simply want to return the client that was just to show you what the client is so in this same file we're going to say export async function get user and this is going to use this function right here create client we're going to say const we're going to destructure the auth from the create client function and then we're going to say const user object equals auth dot get user and then we're going to say if user object dot error that looks pretty stupid so we're going to come here i got to add await right here and then we can remove the await right there let's also remove that parenthesis so we're going to say if the user object error exists we're going to console.error the error and then we're going to return null there's no user otherwise we're going to return the user object dot data dot user so we're going to be using this everywhere throughout our app anytime we want to get the user's information we're going to use this function get user all right so now that we have set this up we can now create users and log in with users what we have to do is go to our auth form and we're now going to write this handle submit function so we're going to say start transition in this this is this has to be async and the reason we use start transition is because it allows us to show if we didn't use this then the moment we click handle submit the entire ui is going to freeze up if we use start start transition it allows us to show like loading states while the server action is running So I use start transition for every single server action I use So we're going to say const email equals form data get email. We're also going to get the password. And then we're going to say let error message. We're going to say let title. and we're going to say let description because we're going to use this for our toast depending on if it's a login or a signup and then we're going to say if is login form the error message is going to equal await and make sure to put that in parentheses login action which we have not written yet we're going to make this in a second and we're going to pass in the email and the password and then this is going to return the error message the title is going to be logged in and the description is going to be you have been successfully logged in so that's if it's the login form if it is not the login form which means it's a sign up form we're going to do some other stuff so let's just paste this and instead of the login action it's going to be sign up action and then instead of logged in, it's going to be signed up. And then this is going to be, check your email for a confirmation link. And then below this, we're going to say, if there is not an error message, yes, this is exactly what we want. If there's not an error message, show some toast that has the title, the description, and this is going to be successful. We're also going to use our router, which we imported right here. And instead of push, we're going to say replace because we don't, if you say push, then they press the back button. They can go back to the login page. We don't want that. We want that page to be removed. And then if there is an error message, we're going to just show some toast with the error message. So now this function is going to work as soon as we write these server actions. So we're going to come over here to source. and i'm going to create a new file called actions slash users.ts and at the top of this page we have to say use server that's how you're telling nextjs this is a server action and we're going to say export const login user action and then we're going to have a try catch block so if there's an error we're going to return handle error which is a function that we will write in a second because we're going to use this for all of our server actions we're going to use this same error handling so in this try catch we're going to say const and we're going to get the auth object from await create client which is that function we wrote earlier for super base and then we're going to say const error equals await off dot sign in with password and then we just pass in the email and the password and then below this we're going to say if error throw the error and then that's going to basically that's going to trigger this code right here here if there's not an error we're going to return error message is null and so this function is going to return error message with the error message so we can write this function real quick so let's come
 lib utils and we're going to say export const handle error it's going to be expecting an error which is of type unknown because that is the default type of these errors well in the catch block it's always unknown so it's going to be of type unknown and we're going to say if error instance of error we're going to return the error message otherwise we're just going to return an error occurred and this needs an equal sign right here so now if we come back to this we can import the handle error and so now that we have this login action we can just paste this right here and call this sign up action and instead of this being login user action this is just going to be called login action and so we're just going to instead of sign up or instead of sign in this is going to be sign up and we're going to destructure the error as well as some data and we're right here we're going to say const user id equals data.user dot ID and we're gonna say if there's not a user ID throw an error and we'll say air signing up and the reason we want that user ID is because we're going to so when you sign up there are two things so in Superbase there's this thing called authentication this is going to show all of the users but if we want to store a bunch of information about the users you should not store it in this you should create a table called users and so that's exactly what we're going to do when we're when we sign up this creates the user using supabase off but then right after we do that we want to also create a user in our users table and so right here we'll just say add user to database and we will do this later for now this is good so if we come back to our auth form and we import login action import signup action this should now work assuming we did everything correctly so let's make this a little bit larger oh actually i need to go to the header first let's see let's go to the header and instead of this user being like this so first of all we need to make this an async function we're going to say const user equals await get user and so we have an error let's see all right so this this doesn't matter at all so we're going to go to sign up we're going to enter an email we're just going to make a password simple we're going to click sign up boom signed up check your email so let's go check our email come to our email we see we have the confirm your sign up so we click this link it takes us back here you can configure that to actually take you to any route you want we can look at changing that in a bit so now we go to login we type in our email our password notice up here it's showing us because we're not logged in we click login boom we are now logged in and we have an actual user if we go to super base we can see we have this user and so now we can log in sign up now we can write the log out function so if we go back to this actions users i'm just going to simply copy this paste this call this logout action i'm going to do a capital o and this does not require any parameters this is going to be auth sign out we don have to pass anything into this and then if there an error throw an error otherwise we good so let go back to our logout button i actually am going to change the name of this i want the capital o doesn't matter do whatever you want save this to rename this file and then in our header i'm going to call this the log out button hold on i'm going to reset my typescript server see if that gets rid of that error okay so now this is working let's go to our logout button and instead of this await new promise we're going to say const error message is going to equal await log out action and so now we should be able to log out we log out it worked if this is some error it doesn't matter we're good we can now log in log out sign up we can do all that stuff all right so now that we got all set up now we can set up our database and we're going to be using prisma and Supabase together. So let's go ahead and set up Prisma. So we're going to go to these docs. I'll put these in the description and we're just simply going to copy this code. We're going to come over to our project and we're going to create a file called db slash schema dot Prisma. And we're going to paste this in. And so we see right here, env database URL. We need to make sure that this database url is this so these need to have the same spelling because that this right here this connection string that we got from supabase earlier this is how prisma is going to know how to connect supabase so we need to make sure these are the same so we're going to make a few changes to these so we're not going to have any posts we're going to have notes and instead of using ids we're going to use uuid so we're going to say string and then right here we're going to call this uuid and then i'm actually just going to get rid of all of this and we're going to say text is going to be a string author is going to be a user and we're going to say at relation and we're going to say fields i want to say author id and it's going to reference id so beneath this we're going to say author id and that's going to be a string and so instead of make this work we need to come into the user and this needs to be a string and then instead of auto increments we're going to put uuid so basically this thing knows let me make this a little bit nicer so there's not going to be a field when we go into the database there's not going to be an author field for a note there's going to be an author id field and this is how in prisma how we say what this author id is and the relation that it has in the data and then below this we're also going to have created at and we're going to have updated at and this is also going to default to now we can copy this put this at the bottom and then we can get rid of names so we we just have a very simple setups and so this as well is not going to be a field in our database this is just how we say the user is going to have a relationship with these notes and so it knows that each user is going to be associated with possibly a list of notes so it a one relationship so now we going to come over to these docs also linked below and inside of this db folder we going to create a file and we going to call it prisma and we going to copy this paste this i'm going to remove this and we need to add the prisma client so i'm going to say pmpm add at prisma slash client and then we need to do one more thing so we need to come into package json and we're going to create a script and we're going to call this migrate and this is going to be pnpm dlx prisma if you're using npm then this should just be npx prisma and we're going to say generate and we're going to say double ampersand and we're going to write a little script to basically tell prisma because prisma this right here is expecting this to be in dot env but with next js we're going to use dot env dot local so i need to write a little script that basically tells prisma it's in dot env dot local so we're going to say so i'm going to type in this script and then we're going to say pmp dlx prisma migrate dev and then also below this we're going to say prisma and we're going to have an object here i'm going to say schema and then we're going to tell prisma where our prisma.schema file is and this should be db because prisma assumes that it's just in schema.prisma at the root of the project we want to put it right here so we need to do this and so and so we see we have these this error right here so we need to run this script first so we need to say p npm migrate or if you're using npm it's npm run migrate so we're just going to call this init and so now if we go to our supabase we go to table editor we see we have a note and we have a user and so now our project is set up to supabase as for this little error i don't know what's going on here let's we'll come to this in a second this should be working uh yeah when we go to use Prisma, if this causes a problem, we'll figure that out. It should work, but we're going to figure it out, period. So the first thing we're going to use Prisma for is, I told you when we did our sign up. So let's go to our actions, users, our sign up actions. So we're going to add the user to the database. So we're going to say await Prisma.user.create. and then we're going to say data and we're going to say id equals user id and then we're also going to pass in the email so now i'm going to log out and i'm going to sign up with a different email and we'll see if this works so if we go over to supabase and we look in the user we see that it was not created but the user was okay so yeah i need to figure out why this is not working okay so the reason this was not working is we need to first do pnpm dlx prisma generate if you're using npm then it would just be npx prisma generate so if you run that this should now work when you run generate it adds all of the types and all this information to your node modules so now if we go go back to the server action yes now when i type this in this should be included in the autocomplete so i'm going to come into my super base users i'm going to delete this one i'm going to go back to our project and then i going to sign up type in the email so now this should let see Okay Maybe this didn go through all the way or something Okay Let let refresh this We going to use this email. We're going to sign up. Okay. So we're going to wait a second and then we're going to do this and it's going to work. The fuck is going on? Okay. So some weird things were going on. So I'm going to go to the user. This is in the database. This is the table editor. I deleted that user. let's go back to authentication let's delete the user here and now this is going to work so now if we go to supabase we refresh this we see in auth we have this user but then we also have in our table editor in users we have this user and this is how we're going to associate all of the notes with the user all right so when you're using prisma you you need to make sure that if some things are going wrong like how this was not importing and then so we we see that we have this thing note this thing user when we run the generate script this creates all of these types and all of this stuff and it puts it in the node modules so if you're having any trouble like later you'll see we use this note as a typescript typed user as a typescript type if these things are not showing up you need to use the prisma generate command and that will do it for you that's how you have to do it all right so now what i'm going to do i'm going to i'm going to delete this user again in the table editor i'm going to come to the authentication i'm going to delete all of these users and we're going to start from scratch because now we have this properly set up so I'm going to sign up I'm going to enter my email and this is going to send me an email so we're going to confirm our email we're going to log in we're successfully logged in if we go to this we will now see in the authentication we have this user with this email and then also in our table editor in our user we have this same user so now that we have our user set up and we have our connection to our database now we can start adding the functionality of creating notes updating notes all that so first thing we're going to do is create the sidebar which is going to show all of our notes we'll be able to select different notes we'll be able to delete notes so we're going to use the shad cn sidebar so let's do that so we're going to come over to shad cn we're going scroll down to the sidebar and we're going to run this make this a little bit smaller and then let's see if it automatically does this maybe not let's go to the styles globals we can see looks like it automatically added that for us and then what we're going to do is we're going to get the sidebar provider we're going to go into our layout.tsx we're going to wrap all of this in the sidebar provider so we're going to import this and then we're going to have something called app sidebar and so we need to come back to this shad cn and that's exactly what this is right here so we're going to copy this and then in our components we're going to create a new file we're going to call this app sidebar.tsx we're going to paste this in save that come back over here and we're going to import this and so this is doing some weird stuff because right here it was asking me these questions about shad cn so i have to finish this so no i do not want to overwrite the button
 we're going to say focus visible the ring will be zero we're going to say focus visible ring offset zero so now we're going to come inside this function and we're going to say const text equals e dot target value and we're going to set note text to the text and then we're going to come up here and we're going to say let update timeout and this is going to be nodejs dot timeout and so the reason we're using this is because when you're typing it's not just going to save on every single keystroke it's going to save after you don't do anything for like a second or two and this is called debouncing so we're going to say clear timeout every time someone presses a key it's going to clear the current timeout and then we're going to reset the timeout to a new timeout and this is going to be update note action and this is going to expect the note id and the text and then we're going to say d bounce timeout and we're going to use this value somewhere else in our project so we're going to come down here to lib and we're going to say constants.ts and we're going to say export const debounce timeout we're going to set this equal to 1 000 milliseconds so now if we come in here we can import this this is not correct this should be note text and set note text so we need to create a use effect right here so we're going to say use effect we're going to say anytime the note id changes that is in the params we need to make sure that we update the the global note text to reflect that so we're going to say if note id param equals note id then we're going to set note text to the starting note text so basically this this says well we need to come down here and we need to say note id param and then also the note id because we use that and the set note text we also need to pass in the starting note text we're not actually looking for when this changes this will change a split second after this changes this this is going to be the first thing that changes so when we change the note that we're editing this starting note text is immediately going to change and then because this is a hook and it's in a client component this is going to take a split second to run so that's why we want the starting note text in the dependency array in fact i'm going to move this to the front because that is the most important one we just put these in there because it's a react best practice to put all variables that are inside the use effect in the dependency array so now we've got two things we need to do we need to create this use note hook and context and then we also need to add this update note action so first we're gonna do this so we're gonna come into providers and we're gonna create note provider.tsx so at the top of we gonna say use client and we gonna say type note provider context type equals we gonna say note text which is of type string and then set note text which is that type And then right here we going to say export const note provider context which is going to equal create context which we import from React And this is going to be of type note provider context type. And then inside of this, we set the default values. And then right here is where we write our function for our note provider. And this is going to expect the children because we're going to wrap our app in this. And then we're just going to say use state and we're going to say note text. and we're going to set this to an empty string and then right here we're going to say return we're going to say note provider context dot provider and the value is going to equal these things right here and we also need to come at the bottom and we need to say export default note provider so we're going to wrap our app in this provider and this basically gives this value note text can be accessible everywhere because this is a component that is outside of everything so everything inside of it is able to see what is the note text so in order to actually get this note text we are going to create a custom hook called use note and this is also going to use the client and we're going to have a function called use note and we're going to say const context equals use context for the note provider context and then we're going to say if there's no context we're gonna throw an error that just says use use note must be within a note provider and then we're going to return the context and then we need to make sure to export default use note so now we can import this hook right here but if we try to use this we're going to get that error because we need to wrap our app in the provider so we need to come to layout.tsx and outside of the sidebar provider and this toaster we're going to have the note provider and so now we're going to be able to use this global state so now so now right here we have the note text that's all this stuff and then when we update it right here this is updating it and we're going to use this use note hook in the sidebar so if we are editing a note and we change all this stuff you're going to see it in the sidebar as well so the sidebar is always showing the most up-to-date version of the note so now we need to write this update note action. So we're going to come to actions. We're going to create a new file called notes.ts. And at the top of the file, we need to say use server. And I'm going to go to these users notes. And I'm just going to copy this login action because it's very similar. And I'm going to paste this. And instead of calling this login action, we're going to call this update note action And instead of these it going to expect the note id which is a string and the text which is a string and then inside of here we can get rid of a few of these things we can import this handle error and then right here we're going to say const user equals await get user make sure to import this and then we're going to say if there's not a user throw an error you must be logged in to update a note and then we're going to say await prisma import that we're going to say note dot update and we're going to say where the id is equal to the note id and then the data we're going to pass in is the text so now this update note action is going to work properly so let's import this and now we can update a note every so every single time we type something this function runs and it basically says in because we have debounce time set to one second it's going to say in one second run this function but then like a split second later when we type something else this runs again which says clear the time out so the the previous update node action that was going to run in a second has been canceled and it's been updated with a newer version of that and so as you're typing this process is continuously happening where it's creating a new update node action to occur in a second right after deleting the previous one so you're typing you're typing you're typing you stop if a second goes by without typing then this update note action is actually going to run so now we need to actually create a note so that we can see this in action so we're going to go to the new note button and we're going to get this working all right so first thing let's make this actually look like the button so we're going to import a button from shad cn and this is going to be we're going to have a loading state so we're going to say loading if it's loading then have loader to animate spin otherwise it's going to say new note so let's import this and then let's save that let that format and then also in this button we're going to say on click and we're going to have a function called handle click new note button and then we're going to say variant of secondary a class name of width 24 and this is going to be disabled when it's loading so now we need to write this function but first let's create some state for the loading this starts off as false and then we have the function handle click new note button and this is going to be an async function so we're going to say if there's no user we're going to send them to the login page so we're actually going to come up here we're going to say const router equals use router from next navigation and then right here we're going to say router.push login else so if they are logged in we're going to set loading to true and then we're going to create a uuid using the uuid package so we need to say pmpm add uuid and then right here we need to say import we're going to say v4 as UUID V4 from UUID. And then this UUID is going to equal UUID V4 And then we going to say a weight Create Note action and all we need to do is pass in the uuid and then after that we going to say router and it going to send them to the route and then we're going to say router.push and we're going to say slash question mark I'm going to say note ID equals the UUID. And once we do that, then we're going to have some toast. So let's come up here and import toast. Toast equals use toast. Let's import that. So we're going to say if it is successful, we're going to say new note created. Description, you've created a new note. Make it whatever you want. and then variant we're going to say success and then after this we're going to say set loading to false so now the only thing we need to do is create the create note action so we're going to come up here to notes and we can just copy and paste that and we're going to call this create note action and the create note action just expects a uuid so right here well it's just going to be the note ID. So right here, we're going to say you must be logged in to create a note. And then we're going to say Prisma note create. And then we're just going to pass in the data, which is that. So now we should be able to create a note. So we're going to come back over here. We're going to import this create note action. So if we did this all correctly, we should be able to create a new note so i create new note it says new note created so let's go to our database let's go to the notes and we can see we have a new note created so let's go back to this and so now if we type we can actually see boom it just fired off this update note and now if we come over here and refresh this, we can see the text is now updated. And you can see if you look right here in the terminal while we're typing, you'll see just as we type, nothing's happening. And then I wait and I stop typing for a couple seconds or a second, and then this thing runs. And so now if I create another new note, it's saving the current note. Boom. And now we have another new note so if i refresh this we can see we have this note updated plus our new note so now that we can create our notes and update our notes we're going to add all of our notes on the sidebar and then when we click on these notes it's going to take us and when we click on these notes it's going to change the note id in the url which is then going to make this show the current note and then we'll also add a delete button to each of these notes all right so let's get this sidebar going so let's go to this sidebar group content and we are now going to fill this out so let's first get this html set up so this is going to be sidebar group content and we're going to call this shad cn because we're going to import this from shad cn but we're going to rename it so So sidebar group content as sidebar group. So this is how you can rename an import. And inside of this, we're going to have a div.
 in that div we're gonna have a search icon i'm gonna say class name absolute left to size of four we're creating our search bar right now for this we can say relative flex item center and then below this we're going to have our input from shad cn i'm going to say class name we're going to say bg muted and a padding left of eight so there's space for our search icon and then placeholder we're going to say search your notes and then the value is going to equal search text and then on change is going to be that so we can come up here and we can now say that and so now we see we have our search bar and this thing is way too small meant to type in size four so now boom we can search all of our notes and it's going to immediately filter through all of the notes that we have right here so below this we're gonna have our sidebar menu this is gonna have a class of margin top four and then in here we're gonna show all of the filtered notes so let's set this search thing up to work so first we're going to say use state and we're going to say local notes and this is going to equal notes and then we're going to say use effect and we're going to say when the notes change we're going to say set local notes to the notes and then below this we are going to do a fuzzy search so we're going to use a library called fuse js for that so we're going to say pmpm add fuse.js so now we can say const filtered notes equals we're going to say if there is a search text then we want fuse we need to import this so we're going to say import fuse from fuse js and actually before we do this and we need to come up here and we need to create this function called fuse so we're going to say fuse equals use memo and we're going to return new fuse local notes and then we're going to say the keys that we're looking for or text this is what we're matching it so it's each note it's note dot text and then the threshold we're going to set this to point four so if we hover over this it says one would match anything and zero requires a perfect match so you play you mess around with this do whatever you want I'm doing point four and also this keys this needs to be an array so the reason we use use memo is because I also need to right here having a dependency array local notes so the reason we use use memo right here is because every single time this component would re-renders it's creating this new thing every single time and that is unnecessary so we use the use memo so that this function only gets recreated when the local notes change so this just makes it a little bit more efficient so now we can come to our filter notes and we can say search if there is a search text then we going to say fuse dot search and we going to pass in the search text And then we going to say dot map and we just going to return the result or for each result we going to return the result dot item and if there is not search text then we're just going to simply return the local notes and so now if we come down here in our sidebar menu we can say for all of the filtered notes we're going to map through each note and we're going to return a sidebar menu item we're going to say a key equals note.id and we're going to give this a class name of group slash item and i'll explain why we do that in a second and so in here we're gonna have a couple of components we're gonna have select note button and this expects the note and then we're also going to have a delete note button and so we need to create these components so the reason why we have this group item is because is because we are going to make this delete button you're not going to be able to see this unless you're hovering over the entire thing so we are so basically this has dynamic css that relies on us hovering over the group rather than this itself so basically in here we're going to say group hover then do something we're also going to pass in a function of this called delete note locally and the reason we do this is because when we delete the note it's going to delete it on the database what we could do is just have it refresh and there would be no need for this but that is a lot of unnecessary overhead so this simple function is just going to remove that note from this list when we delete it so we're going to say const delete note locally and it's going to want the note id we're going to say set local notes exactly to that so basically it's just going to filter through all the notes and it's going to say we only want notes that don't equal this note id so now we need to create these two buttons all right so let's just create both of these components and then we will fill them in so we're going to create select note button.tsx rfce and then we're going to say type props equals i believe it's note id which is a string and we're going to say note id props we'll save that this is also going to be a client component so we're going to say use client okay it is the note not the note id so instead of note id this is going to be note this is going to be of type note which we import from prisma and so now we can import this get rid of that error and then we'll add the delete note button so we'll come right here delete note button.tsx rfce this is a client component type props equals note or is this just note id it's the whole note okay okay this should actually be be note ID and right here we're going to pass a note dot ID so come over here this is expecting note ID which is a string and then also delete note locally which is going to be a function like that and then we going to pass that in and now we come over here and we import this and we still have an error this we don need this okay so now we can see that this is appearing twice which is exact what we would expect because we have two notes and if we look at them one of them is empty and one of them says this is our note so we can see if this works yep but then if i do a bunch of crazy stuff yeah okay so this is working we'll test it a little bit more later when we can actually see what's in there but our search functionality is working also real quick let's go into the header and then right here we're going to put the sidebar trigger and we're going to give this a class name we're going to say absolute left one top one and so now we have this button right here to toggle the sidebar all right so let's go to the select note button we'll do that first so the first thing we're going to want we're going to want the note id which we will get from use search params we'll get note id otherwise this is going to be an empty string and then we're going to say const note text we're going to rename this to selected note text and this is going to equal use note and the reason we call this selected note text is because this is going to be the component for every single one of these on the side and so that's confusing calling this note text because it's like is it the note text for this specific one no it's the global one so that's why it's the selected note text the one that we are looking at and then right here i'm going to say const blank note text equals and we'll say empty note this is what's going to be displayed if the note has no text and then we'll say let note text equals local note text otherwise blank note text and I need to come up here and I need to say use state local note text and we're going to set this equal to note dot text and we're going to write some used effects right here that's going to do some kind of weird stuff so I'm going to explain that in a second so right here below this we're going to say if and we're going to say should be global note text then the note text is going to equal selected note text otherwise blank note text so i had to do a lot of this weird stuff because what would happen is when i would click on a note on the sidebar it would flash the text of the global state when we we didn't want that yet because this was not yet changed to the note we just clicked so let's say we were on note one when i clicked on note two it says okay note two you should show the global note text but the global note text would not be set until a fraction of a second after that so it would if we were on note one and we clicked note two it would flash note one for a second and then do note two. So I have to do all these weird use effects right here to fix that problem. So right here we going to have some use state We going to say should use global note text we going to set this to false and then right here we're going to have a use effect and in the dependency array we're going to have note id and note dot id we're going to say if note id equals note dot id then we're to say set should use global note text to true else we're going to set it to false and then i spelled this incorrectly right here and then we also have to use one more use effect right here use effect and we're going to say if could use global note text then set local note text to that and then we're going to say if selected note text or should use global note text change change then we're going to run this right here this is the most confusing part of the entire app it's probably not the cleanest or the best solution but this is what i came up with it works it makes the ui look very good so we're just going to go with that so now we can come down and we can start styling this so we're going to say sidebar menu button and we're going to say as child and then we're going to give this a class name and we're going to put some dynamic stuff in here so use squiggly braces and back ticks and we're going to say items start we're going to say a gap of zero, a padding right of 12, and then we're going to say note.id equals noteid. If that is the case, then we're going to say bg sidebar accent slash 50. Otherwise, we're just going to show nothing. And otherwise, this is just going to be a blank string. actually we could go like this which would be a little bit cleaner so we're just going to do the ampere stand instead of the ternary and then in here we're going to say link so each of these buttons is going to actually be a link and then we're going to say let's see if that's accurate hold on let's close this thing off this class name is not what we want we want flex height of fit flex call that href is correct and then in here we're going to have a p tag we're going to give this a class and we're going to say with the full overflow hidden truncate text ellipsis and then white space no wrap and the reason we do that is so if the text is super long it's going to end right here and have like a dot dot dot at the end and so right in here we're gonna have the note text and so now we can see this is starting to look more reasonable we can come down here add another p tag and in here is going to be note dot updated at dot to local date string and then we can also add some styling to this text extra small and then we're going to say text muted foreground and that is it for this now we need to go to this delete note button all right so we're going to go to shad cn and we're going to go to alert dialog we're going to add this and then the reason i come here is because we're just going to use
 """

with open("final_transcript.txt", "w", encoding="utf-8") as f:
    f.write(full_script)

