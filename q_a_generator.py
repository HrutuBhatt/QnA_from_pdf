# -*- coding: utf-8 -*-
"""Q/A_generator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wm4k9XLveBLuXjP-AQOvvXyN4rh3vzVN
"""



import os
import re
import pandas as pd
import logging
import unittest

#Configuration for logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

def configure_git(user_email: str, user_name: str):
    """
    Configures Git with the provided user email and name.

    Parameters:
    user_email (str): The email address for Git commits.
    user_name (str): The name for Git commits.
    """
    try:
        os.system(f'git config --global user.email "{user_email}"')
        os.system(f'git config --global user.name "{user_name}"')
        logger.info("Git configured successfully.")
    except Exception as e:
        logger.error(f"Error configuring Git: {e}")
        raise

def clone_repo(github_token: str, repo_owner: str, repo_name: str):
    """
    Clones a GitHub repository using a personal access token.

    Parameters:
    github_token (str): The GitHub personal access token.
    repo_owner (str): The owner of the GitHub repository.
    repo_name (str): The name of the repository.
    """
    try:
        repo_url = f"https://{github_token}@github.com/{repo_owner}/{repo_name}.git"
        os.system(f'git clone {repo_url}')
        os.chdir(repo_name)
        logger.info(f"Repository {repo_name} cloned successfully.")
    except Exception as e:
        logger.error(f"Error cloning repository: {e}")
        raise

def extract_qa_pairs(structured_qa):
    """
    Extracts question-answer pairs from a structured text format.

    Parameters:
    structured_qa (str): The input text containing questions and answers.

    Returns:
    list: A list of question-answer pairs.
    """

    try:
        qa_pairs = re.findall(r"\d+\.\s\*\*(.*?)\*\*:\s*(.+)", structured_qa)

        # Remove '*' from questions and answers
        qa_pairs = [(re.sub(r"\*", "", q), re.sub(r"\*", "", a)) for q, a in qa_pairs]

        print(qa_pairs)
        logger.info(f"Extracted {len(qa_pairs)} QA pairs successfully.")
        return qa_pairs
    except Exception as e:
        logger.error(f"Error extracting QA pairs: {e}")
        print(e)

def save_to_csv(qa_data, filename="qa_data.csv"):
    """
    Saves the question-answer data to a CSV file.

    Parameters:
    qa_data (list): A list of question-answer pairs.
    filename (str): The name of the output CSV file.
    """
    try:
        df = pd.DataFrame(qa_data, columns=["Question", "Answer"])
        df.to_csv(filename, index=False)
        logger.info(f"QA data saved to {filename} successfully.")
    except Exception as e:
        logger.error(f"Error saving CSV: {e}")
        raise

import google.generativeai as genai
from pypdf import PdfReader

# Configure Gemini API
genai.configure(api_key="API_KEY")

# Function to extract text from PDF
def extract_text_from_pdf(pdf_path):
    reader = PdfReader(pdf_path)
    text = ""
    for page in reader.pages:
        text += page.extract_text() + "\n"
    return text

pdf_path = "llm_pdf.pdf"  # Upload the file in Colab and set the path
text = extract_text_from_pdf(pdf_path)
print(text[:500])  # Print first 500 characters to check

def generate_structured_qa(text):
    model = genai.GenerativeModel("gemini-1.5-flash")  # Initialize the model

    prompt = f"""
    Generate 100 good and meaningful question and its answer pairs from text.
    eg: 'what are LLM':'LLMs are large language models'. Don't divide into chapters, straight 100 questions.
    Use this text: {text}
    """

    response = model.generate_content(prompt)  # Correct API method
    return response.text  # Extract the generated text

structured_qa = generate_structured_qa(text)
print(structured_qa)

qa_data = extract_qa_pairs(structured_qa)
save_to_csv(qa_data, "qa_data.csv")

import pandas as pd
import re

qa_data = extract_qa_pairs(structured_qa)
save_to_csv(qa_data, 'qa_data.csv')
print(qa_data)

"""Unit Test

"""

class TestQAProcessing(unittest.TestCase):
    def test_extract_qa_pairs(self):
        """Test if QA pairs are extracted correctly."""
        input_text = """
        1. **Q: What is the arXiv ID of the text?**
        **A:** arXiv:2501.09223v1

        2. **Q: What is the subject classification of this text?**
        **A:** cs.CL (Computational Linguistics)
        """
        expected_output = [
            ["What is the arXiv ID of the text?", "arXiv:2501.09223v1"],
            ["What is the subject classification of this text?", "cs.CL (Computational Linguistics)"]
        ]
        self.assertEqual(extract_qa_pairs(input_text), expected_output)

    def test_save_to_csv(self):
        """Test if CSV file is created successfully."""
        test_data = [["Question 1", "Answer 1"], ["Question 2", "Answer 2"]]
        filename = "test_output.csv"
        save_to_csv(test_data, filename)
        self.assertTrue(os.path.exists(filename))
        os.remove(filename)  # Clean up after test

